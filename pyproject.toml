[project]
name = "microtorch"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "numpy>=2.2.0",
]

[dependency-groups]
dev = [
    "ipykernel>=6.29.5",
    "pyright>=1.1.390",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "ruff>=0.8.3",
]

[tool.pyright]
reportMissingImports = false
typeCheckingMode = "strict"
venv = ".venv"
venvPath = "."

[tool.coverage.run]
branch = true
source = ["microtorch"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
]

[tool.coverage.html]
directory = "coverage_html"

[tool.pytest.ini_options]
addopts = """
    --cov=microtorch
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-branch
    """
pythonpath = ["./"]
testpaths = "tests"
xfail_strict = true

[tool.ruff]
line-length = 88
target-version = "py310"
include = [
    "microtorch/**/*.py",
    "tests/**/*.py",
]

[tool.ruff.lint]
extend-select = [
    "Q",
    "RUF100",
    "C90",
    "UP",
    "I",
    "D",
]
isort = { combine-as-imports = true, known-first-party = ["microtorch"] }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
    "D200", # ignore one-line docstring should not be in multi-line format
    "D212", # ignore multi-line docstring summary should start at the second line
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D"]
"docs/**/*.py" = ["D"]
